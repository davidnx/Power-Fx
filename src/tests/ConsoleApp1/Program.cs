// <auto-generated/>

using System;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Readers;
using Microsoft.PowerFx;
using Microsoft.PowerFx.Connectors;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            //Main2().Wait();
            MainASPTest().Wait();
        }

        static void Run(RecalcEngine engine, string expr)
        {
            var r1 = engine.EvalAsync(expr, CancellationToken.None).Result;
            Console.WriteLine(r1.ToObject());
        }

        static async Task MainASPTest()
        {
            var cache = new CachingHttpClient();

            var config = new PowerFxConfig();
            var url = "https://localhost:44393";
            var doc = await GetSwaggerDocFromUriAsync(url);

            var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri(url);

            config.AddService("Test", doc, httpClient, cache);
            
            var engine = new RecalcEngine(config);
            //var r1 = await engine.EvalAsync("First(Test.GetWeather(\"Redmond\", 25)).summary",CancellationToken.None);

            Run(engine, "Test.GetKey(\"Redmond\") + 5");
            Run(engine, "Test.GetKey(\"Redmond\") + 4");
            Run(engine, "Test.UpdateKey(\"Redmond\", 10)");
            Run(engine, "Test.GetKey(\"Redmond\") + 5");
        }

        static async Task Main2()
        {
            var json = File.ReadAllText(@"C:\temp\weather.json");

            var doc = GetSwaggerDocFromFile(@"C:\temp\weather.json"); ;

            var config = new PowerFxConfig();

            HttpClient client = new PowerPlatformConnectorClient(
                "firstrelease-001.azure-apim.net", // endpoint
                "839eace6-59ab-4243-97ec-a5b8fcc104e4", // environment
                "shared-msnweather-8d08e763-937a-45bf-a2ea-c5ed-ecc70ca4", // connectionId
                () => File.ReadAllText(@"c:\secrets\connector_token.txt"));            

            config.AddService("MSNWeather", doc, client);

            var engine = new RecalcEngine(config);
            var result = await engine.EvalAsync(
                "MSNWeather.CurrentWeather(\"Redmond\", \"Imperial\").responses.weather.current.temp",
                CancellationToken.None
            );
        }

        // Call connector
        class MyHttpClient : HttpMessageHandler   
        {
            HttpClient _client = new HttpClient();

            // Stamp on request. 
            private string _authToken;

            protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
            {
                return _client.SendAsync(request, cancellationToken);
            }
        }


        static OpenApiDocument GetSwaggerDocFromFile(string path)
        {
            using (var s = new FileStream(path, FileMode.Open))
            {
                var doc = new OpenApiStreamReader().Read(s, out var diag);
                return doc;
            }            
        }

        static async Task<OpenApiDocument> GetSwaggerDocFromUriAsync(string endpointUrl)
        {
            var httpClient = new HttpClient();

            var apiEndpoint = endpointUrl + "/swagger/v1/swagger.json";
            var stream = await httpClient.GetStreamAsync(apiEndpoint);

            // Read V3 as YAML
            var openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);
            return openApiDocument;
        }

        // Invoke a local swagger bot endpoint?

        // Binding:
        //   Swagger - could we get this from APIM endpoint? (need auth? or cache it)
        //     !!! this has the endpoint baked in it too... 
        //   Connection name - "MSNWeather", this is easy, let them control since it must match binding expr.
        //        we could suggest a default.

        // Runtime:
        //   environmentId
        //   true endpoint - could have changed from swagger..
        //   connectionId - instance of a connector in the env
        //   Auth object!!
        static async Task MainAsync()
        {
            // await new Test3().Foo();



            var json = File.ReadAllText(@"C:\temp\weather.json");
            //var poco =  new SwaggerParser().Parse(json);

            var config = new PowerFxConfig();

            // await config.AddAspOpenApiService("Test", "https://localhost:44393");

            // $$$ Could we get swagger from the apim endpoint?
            string connectionId = "shared-msnweather-8d08e763-937a-45bf-a2ea-c5ed-ecc70ca4";
            // var auth = new ConnectorAuth();
            // config.AddService("MSNWeather", json, connectionId, auth);

            var engine = new RecalcEngine(config);

            var result2 = await engine.EvalAsync(
                "First(Test.GetWeather(\"Redmond\", 25)).summary",
                CancellationToken.None
            );

            engine.Eval("1+2"); // 3

            var result = await engine.EvalAsync(
                "MSNWeather.CurrentWeather(\"Redmond\", \"Imperial\").responses.weather.current.temp",
                CancellationToken.None
            );
        }

        /*
        private class ConnectorAuth : HttpConnectorInvoker
        {
            public ConnectorAuth() : base(
                "firstrelease-001.azure-apim.net", // Could get this from swagger...
                "839eace6-59ab-4243-97ec-a5b8fcc104e4", // env Id
                new ConsoleLogger())
            {
            }

            protected override string GetAuthToken()
            {
                return File.ReadAllText(@"c:\secrets\connector_token.txt");
            }
        }*/
    }
}
